---
interface Props {
  headings: Array<{
    depth: number;
    slug: string;
    text: string;
  }>;
}
const { headings } = Astro.props;
---
{
  !!headings.length && (
    <ul data-blog-toc class="sticky leading-5 top-0">
      <li class="h-10 border-b border-primary-700 bg-primary-900 px-3 text-primary-50">
        TOC
      </li>
      {headings.map(({ depth, slug, text }) => {
        let cls = '';
        switch (depth) {
          case 3:
            cls = 'text-base';
            break;
          case 4:
            cls = 'text-base';
            break;
          case 5:
            cls = 'text-sm';
            break;
          case 6:
            cls = 'text-sm';
            break;
          default:
            break;
        }
        return (
          <li class="border-primary-700 text-primary-50 hover:bg-primary-700 hover:text-white border-b">
            <a
              class={`block w-full cursor-pointer px-3 my-2 ${cls}`}
              href={`#${slug}`}
              aria-label={`Scroll to section: ${text}`}
            >
              {text}
            </a>
          </li>
        );
      })}
    </ul>
  )
}

<script>
  const setCurrent: IntersectionObserverCallback = (entries) => {
    for (let entry of entries) {
      const { id } = entry.target;
      const tocHeadingEl = document.querySelector(
        `[data-blog-toc] a[href="#${id}"]`
      );
      if (!tocHeadingEl) return;
      if (entry.isIntersecting) {
        document
          .querySelectorAll('[data-blog-toc] a')
          .forEach((e) => e.classList.remove('active'));
        tocHeadingEl.classList.add('active');
      }
    }
  };

  const observerOption: IntersectionObserverInit = {
    root: null,
    rootMargin: '0px 0px -180px',
    threshold: 1.0,
  };
  const headingObserver = new IntersectionObserver(setCurrent, observerOption);
  document
    .querySelectorAll('article :is(h2,h3,h4)')
    .forEach((heading) => headingObserver.observe(heading));
</script>
